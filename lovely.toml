[manifest]
version = "1.0.0"
dump_lua = true
priority = -10

[[patches]]
[patches.pattern]
target = "tag.lua"
pattern = "self.ability = {"
position = "before"
payload = '''self.count = _tag.count or 1'''
match_indent = true

[[patches]]
[patches.pattern]
target = "tag.lua"
pattern = "ability = self.ability"
position = "after"
payload = ''',
count = self.count'''
match_indent = true

[[patches]]
[patches.pattern]
target = "tag.lua"
pattern = "self.ability = tag_savetable.ability"
position = "after"
payload = '''self.count = tag_savetable.count'''
match_indent = true

[[patches]]
[patches.pattern]
target = "tag.lua"
pattern = "self.HUD_tag.states.visible = false"
position = "at"
payload = ''''''
match_indent = true
count = 2

[[patches]]
[patches.pattern]
target = "tag.lua"
pattern = "self.HUD_tag:remove()"
position = "at"
payload = ''''''
match_indent = true
count = 2

[[patches]]
[patches.pattern]
target = "tag.lua"
pattern = "self:remove()"
position = "after"
payload = '''generateTagUi()'''
match_indent = true
count = 2

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''G.HUD_tags[#G.HUD_tags+1] = UIBox{
      definition = {n=G.UIT.ROOT, config={align = "cm",padding = 0.05, colour = G.C.CLEAR}, nodes={
        tag_sprite_ui
      }},
      config = {
        align = G.HUD_tags[1] and 'tm' or 'bri',
        offset = G.HUD_tags[1] and {x=0,y=0} or {x=0.7,y=0},
        major = G.HUD_tags[1] and G.HUD_tags[#G.HUD_tags] or G.ROOM_ATTACH}
  }'''
position = "at"
payload = '''
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = ''' _tag.HUD_tag = G.HUD_tags[#G.HUD_tags]'''
position = "at"
payload = '''generateTagUi()'''
match_indent = true


[[patches]]
[patches.pattern]
target = "game.lua" # Tag:Yep
pattern = '''G.FUNCS.blind_chip_UI_scale(G.hand_text_area.blind_chips)'''
position = "before"
payload = '''generateTagUi()'''
match_indent = false

# [[patches]]
# [patches.pattern]
# target = "tag.lua" # Tag:Nope
# pattern = '''G.E_MANAGER:add_event(Event({
#         trigger = 'after',
#         delay = 0.5,
#         func = (function()
#             self:remove()
#             return true
#         end)
#     }))'''
# position = "at"
# payload = '''
#     if self.count <= 1 then
#         G.E_MANAGER:add_event(Event({
#             trigger = 'after',
#             delay = 0.5,
#             func = (function()
#                 self:remove()
#                 return true
#             end)
#         }))
#     else
#         self.count = self.count - 1
#         self.triggered = false
#     end
# '''
# match_indent = false

# [[patches]]
# [patches.pattern]
# target = "tag.lua"
# pattern = '''{n=G.UIT.O, config={w=_size*1,h=_size*1, colour = G.C.BLUE, object = tag_sprite, focus_with_object = true}},'''
# position = "after"
# payload = '''{n=G.UIT.O, config={colour = G.C.BLUE, object = DynaText({
#                         string = {
#                             { string = 'x', colour = G.C.JOKER_GREY }, { string = (self.config or 1) , colour = G.C.RED }, },
#                         colours = { G.C.UI.TEXT_DARK },
#                     }), focus_with_object = true}},'''
# match_indent = true

# [[patches]]
# [patches.pattern]
# target = "functions/UI_definitions.lua"
# pattern = '''tag_sprite_ui'''
# position = "before"
# payload = '''{n=G.UIT.O, config={align = "tl",colour = G.C.BLUE, object = DynaText({
#         string = {
#             { string = 'x', colour = G.C.JOKER_GREY }, { string = (G.GAME.tags[#G.GAME.tags].count or 1) , colour = G.C.RED }, },
#         colours = { G.C.UI.TEXT_DARK },
#     }), focus_with_object = true}},'''
# match_indent = true